# В этой задаче вам требуется обработать входные данные и вывести их с использованием различных сортировок. Не
# используйте циклы или условный оператор, потренируйтесь в написании функций, именованных и анонимных,
# а также функций высшего порядка. Именно для обработки этих навыков и предусмотрена такая "постановочная" задача.
#
# Входные данные:
# Последовательность вещественных чисел, вводятся с клавиатуры в одной строке, разделены пробелами.
#
# Выходные данные:
# Преобразованные и отсортированные указанным образом последовательности чисел
#
# 0) Среди введенных чисел для дальнейшей обработки нужно оставить только те из них, которые являются целыми (то есть
# дробная часть равна 0). Эти числа должны быть преобразованы в int.
#
# 1) Последовательность чисел, отсортированная следующим образом: сначала идут положительные числа по неубыванию,
# затем неположительные — также по неубыванию.
#
# 2) Последовательность чисел, отсортированная следующим образом: в порядке неубывания суммы их цифр. При этом,
# если у двух чисел одинаковая сумма цифр, их следует вывести в порядке неубывания.
#
# 3) Последовательность чисел, отсортированная следующим образом: сначала четные числа в порядке неубывания,
# затем нечетные в порядке невозрастания.
#
# Пример
#
# Входные данные
# 0.5 2 2 5 11 10.5 12 -21 1 -8 9 0
#
# Вывод программы
# [1, 2, 2, 5, 9, 11, 12, 0, -21, -8]
# [0, 1, 2, 2, 11, -21, 12, 5, -8, 9]
# [-8, 0, 2, 2, 12, 11, 9, 5, 1, -21]
def digit_sum(n):
    return sum(map(int, str(abs(n))))


def convert_nums(s):
    res = list(map(int, filter(lambda x: not x % 1, map(float, s.split()))))
    print(sorted(res, key=lambda x: (x < 0, x)))
    print(sorted(res, key=lambda x: (digit_sum(x), x)))
    print(sorted(res, key=lambda x: (x % 2 != 0, x if x % 2 == 0 else -x)))


convert_nums('0.5 2 2 5 11 10.5 12 -21 1 -8 9 0')
