# Проверьте, является ли матрица, введенная пользователем, одной из "особенных" матриц.
#
# Необходимо проверить следующие свойства матрицы:
# -матрица является верхнетреугольной (квадратная матрица, все элементы, стоящие ниже главной диагонали -- нули)
# -матрица является диагональной (квадратная матрица, все элементы которой, стоящие не на главной диагонали -- нули,
# на главной диагонали могут быть какие угодно числа)
# -матрица является единичной (диагональная матрица, на главной диагонали которой все элементы -- единицы).
#
# Входные данные:
# В первой строке вводятся два натуральных числа через пробел, m и n, где m -- количество строк в матрице,
# n -- количество столбцов. m > 1, n > 1
# Далее вводятся m строк, в каждой из которых перечислены целые числа -- элементы очередной строки матрицы
#
# Вывод программы:
# Одно из четырех сообщений:
#
# Матрица верхнетреугольная
# Матрица диагональная
# Матрица единичная
# Матрица не является особенной
#
# Примечание 1. При решении задачи запрещено пользоваться numpy и прочими библиотеками. При необходимости используйте
# встроенные структуры данных Python
#
# Примечание 2. Необходимо вывести только одно сообщение из перечисленных, самую "строгую" характеристику матрицы.
# Диагональная матрица -- частный случай верхнетреугольной, считаем её диагональной. Аналогично единичная матрица --
# частный случай диагональной.
#
# Примеры
#
# Входные данные:
# 2 3
# 1 2 3
# 6 7 8
#
# Вывод программы:
# Матрица не является особенной
#
# Входные данные:
# 2 2
# 1 2
# 0 5
#
# Вывод программы:
# Матрица верхнетреугольная
#
# Входные данные:
# 3 3
# 1 0 0
# 0 6 0
# 0 0 10
#
# Вывод программы:
# Матрица диагональная

rows_count, cols_count = map(int, input().split())

mtrx = []

result = ['Матрица диагональная', 'Матрица верхнетреугольная', 'Матрица единичная', 'Матрица не является особенной']

count = rows_count

while count != 0:
    mtrx.append(list(map(int, input().split())))
    count -= 1

if rows_count != cols_count:
    print(result[3])
else:
    unit = set()
    triangle = set()
    diagonal = set()

    for y in range(rows_count):
        if mtrx[y][y] == 1:
            unit.add(2)
        else:
            unit.add(-1)

    cnt: int = 0
    for j in range(0, rows_count + 1):
        cnt += 1
        for i in range(cnt, rows_count):
            if mtrx[i][j] == 0:
                triangle.add(1)
            else:
                triangle.add(-1)

    for k in range(rows_count):
        mtrx[k][k] = 0
        diagonal.update(mtrx[k])

    if len(unit) == 1 and 2 in unit:
        print(result[2])
    elif len(diagonal) == 1 and 0 in diagonal:
        print(result[0])
    elif len(triangle) == 1 and 1 in triangle:
        print(result[1])
    else:
        print(result[3])
